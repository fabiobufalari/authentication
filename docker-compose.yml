services:
  postgres:
    image: postgres:15.6
    container_name: auth-postgres
    environment:
      POSTGRES_DB: authdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"  # Porta padr√£o do PostgreSQL principal
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  postgres-docker:  # Novo container
    image: postgres:15.6
    container_name: postgres-docker
    environment:
      POSTGRES_DB: postgres  # Nome do banco diferente para evitar conflitos
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5433:5432"  # Porta diferente para o segundo PostgreSQL
    volumes:
      - postgres_docker_data:/var/lib/postgresql/data  # Volume separado
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7.2
    container_name: auth-redis
    ports:
      - "6379:6379"

  app:
    build: .
    container_name: auth-service
    environment:
      SPRING_PROFILES_ACTIVE: default
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/authdb  # Conecta ao primeiro PostgreSQL
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
    ports:
      - "8081:8081"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    volumes:
      - .:/app

volumes:
  postgres_data:         # Volume do primeiro PostgreSQL
  postgres_docker_data:  # Volume do novo PostgreSQL