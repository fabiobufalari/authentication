# Configurações do Servidor
server:
  port: 8083
  servlet:
    context-path: /api

# Configurações globais do Spring
spring:
  application:
    name: auth-service
  jpa:
    hibernate:
      ddl-auto: update
      use-new-id-generator-mappings: false  # Crítico para UUID
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        implicit_naming_strategy: org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyJpaImpl
        physical_naming_strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
        id:
          generator: org.hibernate.id.UUIDGenerator
          type: org.hibernate.type.UUIDCharType

  datasource:
    url: jdbc:postgresql://localhost:5432/authdb
    username: postgres
    password: postgres
    driver-class-name: org.postgresql.Driver

# Configuração de segurança JWT
security:
  jwt:
    token:
      secret-key: "umaSenhaMuitoSeguraParaJWT123456!"
      expire-length: 86400000
    refresh-token:
      expire-length: 86400000

# Configuração do Redis e Cache
redis:
  host: redis
  port: 6379

cache:
  type: redis
  redis:
    time-to-live: 3600000

# CORS
cors:
  allowed-origins: "https://meusite.com, http://localhost:3000"

# Actuator / Monitoramento
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
  endpoint:
    health:
      show-details: when_authorized

# Swagger / OpenAPI
springdoc:
  api-docs:
    path: /docs
  swagger-ui:
    path: /swagger-ui.html
    tags-sorter: alpha
    operations-sorter: method

# Perfil de TESTE (H2)
---
spring:
  config:
    activate:
      on-profile: test
  datasource:
    url: jdbc:h2:mem:testdb;MODE=PostgreSQL;DB_CLOSE_DELAY=-1
    driver-class-name: org.h2.Driver
    username: sa
    password: password
  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
    hibernate:
      ddl-auto: create-drop
